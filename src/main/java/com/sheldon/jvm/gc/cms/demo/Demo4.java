package com.sheldon.jvm.gc.cms.demo;

/**
 * @author fangxiaodong
 * @date 2021/09/30
 */
public class Demo4 {

    /**
     * -XX:NewSize=104857600
     * -XX:MaxNewSize=104857600
     * -XX:InitialHeapSize=209715200
     * -XX:MaxHeapSize=209715200
     * -XX:SurvivorRatio=8
     * -XX:MaxTenuringThreshold=15
     * -XX:PretenureSizeThreshold=3145728
     * -XX:+UseParNewGC
     * -XX:+UseConcMarkSweepGC
     * -XX:+PrintGCDetails
     * -XX:+PrintGCTimeStamps
     * -Xloggc:gc.log
     *
     * 新生代初始值和新生代的最大值是 100MB, Eden = 80MB, Survivor From = 10MB, Survivor To = 10MB
     * 堆内存初始值和堆内存最大值是 200MB
     * 大对象进入老年代的阈值: 3MB
     *
     *  S0C     S1C      S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU    YGC     YGCT   FGC    FGCT     GCT
     * 10240.0 10240.0 100.0   0.0   81920.0   8131.8   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  13132.6   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  19664.2   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  24556.7   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  29449.2   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  34341.7   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  39234.2   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  44126.6   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  49019.1   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  53911.6   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  60434.9   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  65327.4   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  70219.9   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  75112.4   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0 100.0   0.0   81920.0  80004.9   102400.0    670.0    4864.0 3079.2 512.0  323.5      38    0.022   0      0.000    0.022
     * 10240.0 10240.0  0.0   100.0  81920.0   2533.6   102400.0    670.0    4864.0 3079.2 512.0  323.5      39    0.023   0      0.000    0.022
     *
     * 通过 jstat 可以看到这里的内存 survivor 里, 每次触发 GC 的时候, 都会置为 0; OU 这里之前是没有的, 是到后面经过 15 次才会有值
     * 所以整个程序这样的话, 是没什么问题的, 一直都这样 OU 也不会增加, YGCT 的时间也很短, 每次都是大概是 0.001s
     *
     * @param args
     */
    public static void main(String[] args) throws InterruptedException {
        Thread.sleep(30000);
        while(true){
            load();
        }
    }

    private static void load() throws InterruptedException {
        byte[] data = null;
        for (int i = 0; i < 50; i++){
            data = new byte[100 * 1024];
        }
        data = null;
        Thread.sleep(1000);
    }
}
